//
// Part.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Part: Sendable, Codable, ParameterConvertible, Hashable {
    public var partNum: String?
    public var name: String?
    public var partCatId: Int
    public var yearFrom: Int?
    public var yearTo: Int?
    public var partUrl: String
    public var partImgUrl: String?
    public var prints: [String?]?
    public var molds: [String?]?
    public var alternates: [String?]?
    public var printOf: String?
    public var externalIds: PartExternalIds?

    public init(
        partNum: String? = nil, name: String? = nil, partCatId: Int, yearFrom: Int? = nil,
        yearTo: Int? = nil, partUrl: String, partImgUrl: String? = nil, prints: [String?]? = nil,
        molds: [String?]? = nil, alternates: [String?]? = nil, printOf: String? = nil,
        externalIds: PartExternalIds? = nil
    ) {
        self.partNum = partNum
        self.name = name
        self.partCatId = partCatId
        self.yearFrom = yearFrom
        self.yearTo = yearTo
        self.partUrl = partUrl
        self.partImgUrl = partImgUrl
        self.prints = prints
        self.molds = molds
        self.alternates = alternates
        self.printOf = printOf
        self.externalIds = externalIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case partNum = "part_num"
        case name
        case partCatId = "part_cat_id"
        case yearFrom = "year_from"
        case yearTo = "year_to"
        case partUrl = "part_url"
        case partImgUrl = "part_img_url"
        case prints
        case molds
        case alternates
        case printOf = "print_of"
        case externalIds = "external_ids"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(partNum, forKey: .partNum)
        try container.encode(name, forKey: .name)
        try container.encode(partCatId, forKey: .partCatId)
        try container.encodeIfPresent(yearFrom, forKey: .yearFrom)
        try container.encodeIfPresent(yearTo, forKey: .yearTo)
        try container.encode(partUrl, forKey: .partUrl)
        try container.encodeIfPresent(partImgUrl, forKey: .partImgUrl)
        try container.encodeIfPresent(prints, forKey: .prints)
        try container.encodeIfPresent(molds, forKey: .molds)
        try container.encodeIfPresent(alternates, forKey: .alternates)
        try container.encodeIfPresent(printOf, forKey: .printOf)
        try container.encode(externalIds, forKey: .externalIds)
    }
}
