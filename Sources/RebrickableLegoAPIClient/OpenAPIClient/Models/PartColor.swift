//
// PartColor.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct PartColor: Sendable, Codable, ParameterConvertible, Hashable {
    public var colorId: Int
    public var colorName: String
    public var yearFrom: Int?
    public var yearTo: Int?
    public var numSets: Int
    public var numSetParts: Int
    public var partImgUrl: String
    public var elements: [String]

    public init(colorId: Int, colorName: String, yearFrom: Int? = nil, yearTo: Int? = nil, numSets: Int, numSetParts: Int, partImgUrl: String, elements: [String]) {
        self.colorId = colorId
        self.colorName = colorName
        self.yearFrom = yearFrom
        self.yearTo = yearTo
        self.numSets = numSets
        self.numSetParts = numSetParts
        self.partImgUrl = partImgUrl
        self.elements = elements
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case colorId = "color_id"
        case colorName = "color_name"
        case yearFrom = "year_from"
        case yearTo = "year_to"
        case numSets = "num_sets"
        case numSetParts = "num_set_parts"
        case partImgUrl = "part_img_url"
        case elements
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(colorId, forKey: .colorId)
        try container.encode(colorName, forKey: .colorName)
        try container.encodeIfPresent(yearFrom, forKey: .yearFrom)
        try container.encodeIfPresent(yearTo, forKey: .yearTo)
        try container.encode(numSets, forKey: .numSets)
        try container.encode(numSetParts, forKey: .numSetParts)
        try container.encode(partImgUrl, forKey: .partImgUrl)
        try container.encode(elements, forKey: .elements)
    }
}
