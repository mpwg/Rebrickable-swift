//
// LegoAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class LegoAPI {
    /**
     Get a list of all Colors.

     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ColorsList
     */

    open class func legoColorsList(
        page: Int? = nil, pageSize: Int? = nil, ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> ColorsList {
        try await legoColorsListWithRequestBuilder(
            page: page, pageSize: pageSize, ordering: ordering, apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get a list of all Colors.
     - GET /api/v3/lego/colors/
     - Get a list of all Colors.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ColorsList>
     */
    open class func legoColorsListWithRequestBuilder(
        page: Int? = nil, pageSize: Int? = nil, ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<ColorsList> {
        let localVariablePath = "/api/v3/lego/colors/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (
                wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "page_size": (
                wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "ordering": (
                wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ColorsList>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get details about a specific Color.

     - parameter id: (path) A unique value identifying this color.
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Color
     */

    open class func legoColorsRead(
        id: String, ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> Color {
        try await legoColorsReadWithRequestBuilder(
            id: id, ordering: ordering, apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get details about a specific Color.
     - GET /api/v3/lego/colors/{id}/
     - Get details about a specific Color.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter id: (path) A unique value identifying this color.
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Color>
     */
    open class func legoColorsReadWithRequestBuilder(
        id: String, ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<Color> {
        var localVariablePath = "/api/v3/lego/colors/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape =
            idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{id}", with: idPostEscape, options: .literal, range: nil
        )
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (
                wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Color>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get details about a specific Element ID.

     - parameter elementId: (path)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Element
     */

    open class func legoElementsRead(
        elementId: String,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> Element {
        try await legoElementsReadWithRequestBuilder(
            elementId: elementId, apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get details about a specific Element ID.
     - GET /api/v3/lego/elements/{element_id}/
     - Get details about a specific Element ID.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter elementId: (path)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Element>
     */
    open class func legoElementsReadWithRequestBuilder(
        elementId: String,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<Element> {
        var localVariablePath = "/api/v3/lego/elements/{element_id}/"
        let elementIdPreEscape = "\(APIHelper.mapValueToPathItem(elementId))"
        let elementIdPostEscape =
            elementIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{element_id}", with: elementIdPostEscape, options: .literal, range: nil
        )
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Element>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get a list of Minifigs.

     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter minParts: (query)  (optional)
     - parameter maxParts: (query)  (optional)
     - parameter inSetNum: (query)  (optional)
     - parameter inThemeId: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SetList
     */

    open class func legoMinifigsList(
        page: Int? = nil, pageSize: Int? = nil, minParts: Double? = nil, maxParts: Double? = nil,
        inSetNum: String? = nil, inThemeId: String? = nil, ordering: String? = nil,
        search: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> SetList {
        try await legoMinifigsListWithRequestBuilder(
            page: page, pageSize: pageSize, minParts: minParts, maxParts: maxParts,
            inSetNum: inSetNum, inThemeId: inThemeId, ordering: ordering, search: search,
            apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get a list of Minifigs.
     - GET /api/v3/lego/minifigs/
     - Get a list of Minifigs.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter minParts: (query)  (optional)
     - parameter maxParts: (query)  (optional)
     - parameter inSetNum: (query)  (optional)
     - parameter inThemeId: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SetList>
     */
    open class func legoMinifigsListWithRequestBuilder(
        page: Int? = nil, pageSize: Int? = nil, minParts: Double? = nil, maxParts: Double? = nil,
        inSetNum: String? = nil, inThemeId: String? = nil, ordering: String? = nil,
        search: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<SetList> {
        let localVariablePath = "/api/v3/lego/minifigs/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (
                wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "page_size": (
                wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "min_parts": (
                wrappedValue: minParts?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "max_parts": (
                wrappedValue: maxParts?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "in_set_num": (
                wrappedValue: inSetNum?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "in_theme_id": (
                wrappedValue: inThemeId?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "ordering": (
                wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "search": (
                wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SetList>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get a list of all Inventory Parts in this Minifig.

     - parameter setNum: (path)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter incPartDetails: (query) Return additional part&#39;s fields. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SetPartsList
     */

    open class func legoMinifigsPartsList(
        setNum: String, page: Int? = nil, pageSize: Int? = nil, incPartDetails: Bool? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> SetPartsList {
        try await legoMinifigsPartsListWithRequestBuilder(
            setNum: setNum, page: page, pageSize: pageSize, incPartDetails: incPartDetails,
            apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get a list of all Inventory Parts in this Minifig.
     - GET /api/v3/lego/minifigs/{set_num}/parts/
     - Get a list of all Inventory Parts in this Minifig.  Optional parameter inc_part_details=1 can be used to return additional part fields, the same as for a single part lookup.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter setNum: (path)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter incPartDetails: (query) Return additional part&#39;s fields. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SetPartsList>
     */
    open class func legoMinifigsPartsListWithRequestBuilder(
        setNum: String, page: Int? = nil, pageSize: Int? = nil, incPartDetails: Bool? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<SetPartsList> {
        var localVariablePath = "/api/v3/lego/minifigs/{set_num}/parts/"
        let setNumPreEscape = "\(APIHelper.mapValueToPathItem(setNum))"
        let setNumPostEscape =
            setNumPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{set_num}", with: setNumPostEscape, options: .literal, range: nil
        )
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (
                wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "page_size": (
                wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "inc_part_details": (
                wrappedValue: incPartDetails?.asParameter(
                    codableHelper: apiConfiguration.codableHelper), isExplode: true
            ),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SetPartsList>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get details for a specific Minifig.

     - parameter setNum: (path)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Set
     */

    open class func legoMinifigsRead(
        setNum: String,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> ModelSet {
        try await legoMinifigsReadWithRequestBuilder(
            setNum: setNum, apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get details for a specific Minifig.
     - GET /api/v3/lego/minifigs/{set_num}/
     - Get details for a specific Minifig.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter setNum: (path)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Set>
     */
    open class func legoMinifigsReadWithRequestBuilder(
        setNum: String,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<ModelSet> {
        var localVariablePath = "/api/v3/lego/minifigs/{set_num}/"
        let setNumPreEscape = "\(APIHelper.mapValueToPathItem(setNum))"
        let setNumPostEscape =
            setNumPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{set_num}", with: setNumPostEscape, options: .literal, range: nil
        )
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelSet>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get a list of Sets a Minifig has appeared in.

     - parameter setNum: (path)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SetList
     */

    open class func legoMinifigsSetsList(
        setNum: String, page: Int? = nil, pageSize: Int? = nil, ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> SetList {
        try await legoMinifigsSetsListWithRequestBuilder(
            setNum: setNum, page: page, pageSize: pageSize, ordering: ordering,
            apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get a list of Sets a Minifig has appeared in.
     - GET /api/v3/lego/minifigs/{set_num}/sets/
     - Get a list of Sets a Minifig has appeared in.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter setNum: (path)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SetList>
     */
    open class func legoMinifigsSetsListWithRequestBuilder(
        setNum: String, page: Int? = nil, pageSize: Int? = nil, ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<SetList> {
        var localVariablePath = "/api/v3/lego/minifigs/{set_num}/sets/"
        let setNumPreEscape = "\(APIHelper.mapValueToPathItem(setNum))"
        let setNumPostEscape =
            setNumPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{set_num}", with: setNumPostEscape, options: .literal, range: nil
        )
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (
                wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "page_size": (
                wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "ordering": (
                wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SetList>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get a list of all Part Categories.

     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PartCategoriesList
     */

    open class func legoPartCategoriesList(
        page: Int? = nil, pageSize: Int? = nil, ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> PartCategoriesList {
        try await legoPartCategoriesListWithRequestBuilder(
            page: page, pageSize: pageSize, ordering: ordering, apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get a list of all Part Categories.
     - GET /api/v3/lego/part_categories/
     - Get a list of all Part Categories.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PartCategoriesList>
     */
    open class func legoPartCategoriesListWithRequestBuilder(
        page: Int? = nil, pageSize: Int? = nil, ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<PartCategoriesList> {
        let localVariablePath = "/api/v3/lego/part_categories/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (
                wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "page_size": (
                wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "ordering": (
                wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PartCategoriesList>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get details about a specific Part Category.

     - parameter id: (path) A unique integer value identifying this part category.
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PartCategory
     */

    open class func legoPartCategoriesRead(
        id: Int, ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> PartCategory {
        try await legoPartCategoriesReadWithRequestBuilder(
            id: id, ordering: ordering, apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get details about a specific Part Category.
     - GET /api/v3/lego/part_categories/{id}/
     - Get details about a specific Part Category.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter id: (path) A unique integer value identifying this part category.
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PartCategory>
     */
    open class func legoPartCategoriesReadWithRequestBuilder(
        id: Int, ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<PartCategory> {
        var localVariablePath = "/api/v3/lego/part_categories/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape =
            idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{id}", with: idPostEscape, options: .literal, range: nil
        )
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (
                wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PartCategory>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get a list of all Colors a Part has appeared in.

     - parameter partNum: (path)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PartColorsList
     */

    open class func legoPartsColorsList(
        partNum: String, page: Int? = nil, pageSize: Int? = nil, ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> PartColorsList {
        try await legoPartsColorsListWithRequestBuilder(
            partNum: partNum, page: page, pageSize: pageSize, ordering: ordering,
            apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get a list of all Colors a Part has appeared in.
     - GET /api/v3/lego/parts/{part_num}/colors/
     - Get a list of all Colors a Part has appeared in.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter partNum: (path)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PartColorsList>
     */
    open class func legoPartsColorsListWithRequestBuilder(
        partNum: String, page: Int? = nil, pageSize: Int? = nil, ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<PartColorsList> {
        var localVariablePath = "/api/v3/lego/parts/{part_num}/colors/"
        let partNumPreEscape = "\(APIHelper.mapValueToPathItem(partNum))"
        let partNumPostEscape =
            partNumPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{part_num}", with: partNumPostEscape, options: .literal, range: nil
        )
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (
                wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "page_size": (
                wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "ordering": (
                wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PartColorsList>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get details about a specific Part/Color combination.

     - parameter partNum: (path)
     - parameter colorId: (path)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PartColor
     */

    open class func legoPartsColorsRead(
        partNum: String, colorId: String,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> PartColor {
        try await legoPartsColorsReadWithRequestBuilder(
            partNum: partNum, colorId: colorId, apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get details about a specific Part/Color combination.
     - GET /api/v3/lego/parts/{part_num}/colors/{color_id}/
     - Get details about a specific Part/Color combination.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter partNum: (path)
     - parameter colorId: (path)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PartColor>
     */
    open class func legoPartsColorsReadWithRequestBuilder(
        partNum: String, colorId: String,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<PartColor> {
        var localVariablePath = "/api/v3/lego/parts/{part_num}/colors/{color_id}/"
        let partNumPreEscape = "\(APIHelper.mapValueToPathItem(partNum))"
        let partNumPostEscape =
            partNumPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{part_num}", with: partNumPostEscape, options: .literal, range: nil
        )
        let colorIdPreEscape = "\(APIHelper.mapValueToPathItem(colorId))"
        let colorIdPostEscape =
            colorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{color_id}", with: colorIdPostEscape, options: .literal, range: nil
        )
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PartColor>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get a list of all Sets the Part/Color combination has appeard in.

     - parameter partNum: (path)
     - parameter colorId: (path)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SetList
     */

    open class func legoPartsColorsSetsList(
        partNum: String, colorId: String, page: Int? = nil, pageSize: Int? = nil,
        ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> SetList {
        try await legoPartsColorsSetsListWithRequestBuilder(
            partNum: partNum, colorId: colorId, page: page, pageSize: pageSize, ordering: ordering,
            apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get a list of all Sets the Part/Color combination has appeard in.
     - GET /api/v3/lego/parts/{part_num}/colors/{color_id}/sets/
     - Get a list of all Sets the Part/Color combination has appeared in.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter partNum: (path)
     - parameter colorId: (path)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SetList>
     */
    open class func legoPartsColorsSetsListWithRequestBuilder(
        partNum: String, colorId: String, page: Int? = nil, pageSize: Int? = nil,
        ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<SetList> {
        var localVariablePath = "/api/v3/lego/parts/{part_num}/colors/{color_id}/sets/"
        let partNumPreEscape = "\(APIHelper.mapValueToPathItem(partNum))"
        let partNumPostEscape =
            partNumPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{part_num}", with: partNumPostEscape, options: .literal, range: nil
        )
        let colorIdPreEscape = "\(APIHelper.mapValueToPathItem(colorId))"
        let colorIdPostEscape =
            colorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{color_id}", with: colorIdPostEscape, options: .literal, range: nil
        )
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (
                wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "page_size": (
                wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "ordering": (
                wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SetList>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get a list of Parts.

     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter partNum: (query) Rebrickable part_num (part number) to lookup. (optional)
     - parameter partNums: (query) Comma separated list of part_num. (optional)
     - parameter partCatId: (query) Part category id (optional)
     - parameter colorId: (query) Color id. (optional)
     - parameter bricklinkId: (query) Bricklink specific id. (optional)
     - parameter brickowlId: (query) Brickowl specific id. (optional)
     - parameter legoId: (query)  (optional)
     - parameter ldrawId: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter incPartDetails: (query) Return additional part&#39;s fields. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PartsList
     */

    open class func legoPartsList(
        page: Int? = nil, pageSize: Int? = nil, partNum: String? = nil, partNums: String? = nil,
        partCatId: String? = nil, colorId: String? = nil, bricklinkId: String? = nil,
        brickowlId: String? = nil, legoId: String? = nil, ldrawId: String? = nil,
        ordering: String? = nil, search: String? = nil, incPartDetails: Bool? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> PartsList {
        try await legoPartsListWithRequestBuilder(
            page: page, pageSize: pageSize, partNum: partNum, partNums: partNums,
            partCatId: partCatId, colorId: colorId, bricklinkId: bricklinkId,
            brickowlId: brickowlId, legoId: legoId, ldrawId: ldrawId, ordering: ordering,
            search: search, incPartDetails: incPartDetails, apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get a list of Parts.
     - GET /api/v3/lego/parts/
     - Get a list of Parts.  Optional parameter inc_part_details=1 can be used to return additional fields, the same as for a single part lookup.  The optional part_nums filter parameter should be a comma separated list of part_num without spaces.  Optionally filter by one or more of the below query parameters.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter partNum: (query) Rebrickable part_num (part number) to lookup. (optional)
     - parameter partNums: (query) Comma separated list of part_num. (optional)
     - parameter partCatId: (query) Part category id (optional)
     - parameter colorId: (query) Color id. (optional)
     - parameter bricklinkId: (query) Bricklink specific id. (optional)
     - parameter brickowlId: (query) Brickowl specific id. (optional)
     - parameter legoId: (query)  (optional)
     - parameter ldrawId: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter incPartDetails: (query) Return additional part&#39;s fields. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PartsList>
     */
    open class func legoPartsListWithRequestBuilder(
        page: Int? = nil, pageSize: Int? = nil, partNum: String? = nil, partNums: String? = nil,
        partCatId: String? = nil, colorId: String? = nil, bricklinkId: String? = nil,
        brickowlId: String? = nil, legoId: String? = nil, ldrawId: String? = nil,
        ordering: String? = nil, search: String? = nil, incPartDetails: Bool? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<PartsList> {
        let localVariablePath = "/api/v3/lego/parts/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (
                wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "page_size": (
                wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "part_num": (
                wrappedValue: partNum?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "part_nums": (
                wrappedValue: partNums?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "part_cat_id": (
                wrappedValue: partCatId?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "color_id": (
                wrappedValue: colorId?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "bricklink_id": (
                wrappedValue: bricklinkId?.asParameter(
                    codableHelper: apiConfiguration.codableHelper), isExplode: true
            ),
            "brickowl_id": (
                wrappedValue: brickowlId?.asParameter(
                    codableHelper: apiConfiguration.codableHelper), isExplode: true
            ),
            "lego_id": (
                wrappedValue: legoId?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "ldraw_id": (
                wrappedValue: ldrawId?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "ordering": (
                wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "search": (
                wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "inc_part_details": (
                wrappedValue: incPartDetails?.asParameter(
                    codableHelper: apiConfiguration.codableHelper), isExplode: true
            ),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PartsList>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get details about a specific Part.

     - parameter partNum: (path)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Part
     */

    open class func legoPartsRead(
        partNum: String,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> Part {
        try await legoPartsReadWithRequestBuilder(
            partNum: partNum, apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get details about a specific Part.
     - GET /api/v3/lego/parts/{part_num}/
     - Get details about a specific Part.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter partNum: (path)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Part>
     */
    open class func legoPartsReadWithRequestBuilder(
        partNum: String,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<Part> {
        var localVariablePath = "/api/v3/lego/parts/{part_num}/"
        let partNumPreEscape = "\(APIHelper.mapValueToPathItem(partNum))"
        let partNumPostEscape =
            partNumPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{part_num}", with: partNumPostEscape, options: .literal, range: nil
        )
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Part>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get a list of MOCs which are Alternate Builds of a specific Set - i.e. all parts in the MOC can

     - parameter setNum: (path)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MocList
     */

    open class func legoSetsAlternatesList(
        setNum: String, page: Int? = nil, pageSize: Int? = nil, ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> MocList {
        try await legoSetsAlternatesListWithRequestBuilder(
            setNum: setNum, page: page, pageSize: pageSize, ordering: ordering,
            apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get a list of MOCs which are Alternate Builds of a specific Set - i.e. all parts in the MOC can
     - GET /api/v3/lego/sets/{set_num}/alternates/
     - Get a list of MOCs which are Alternate Builds of a specific Set - i.e. all parts in the MOC can be found in the Set.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter setNum: (path)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MocList>
     */
    open class func legoSetsAlternatesListWithRequestBuilder(
        setNum: String, page: Int? = nil, pageSize: Int? = nil, ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<MocList> {
        var localVariablePath = "/api/v3/lego/sets/{set_num}/alternates/"
        let setNumPreEscape = "\(APIHelper.mapValueToPathItem(setNum))"
        let setNumPostEscape =
            setNumPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{set_num}", with: setNumPostEscape, options: .literal, range: nil
        )
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (
                wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "page_size": (
                wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "ordering": (
                wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MocList>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get a list of Sets, optionally filtered by any of the below parameters.

     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter themeId: (query)  (optional)
     - parameter minYear: (query)  (optional)
     - parameter maxYear: (query)  (optional)
     - parameter minParts: (query)  (optional)
     - parameter maxParts: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SetList
     */

    open class func legoSetsList(
        page: Int? = nil, pageSize: Int? = nil, themeId: String? = nil, minYear: Double? = nil,
        maxYear: Double? = nil, minParts: Double? = nil, maxParts: Double? = nil,
        ordering: String? = nil, search: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> SetList {
        try await legoSetsListWithRequestBuilder(
            page: page, pageSize: pageSize, themeId: themeId, minYear: minYear, maxYear: maxYear,
            minParts: minParts, maxParts: maxParts, ordering: ordering, search: search,
            apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get a list of Sets, optionally filtered by any of the below parameters.
     - GET /api/v3/lego/sets/
     - Get a list of Sets, optionally filtered by any of the below parameters.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter themeId: (query)  (optional)
     - parameter minYear: (query)  (optional)
     - parameter maxYear: (query)  (optional)
     - parameter minParts: (query)  (optional)
     - parameter maxParts: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SetList>
     */
    open class func legoSetsListWithRequestBuilder(
        page: Int? = nil, pageSize: Int? = nil, themeId: String? = nil, minYear: Double? = nil,
        maxYear: Double? = nil, minParts: Double? = nil, maxParts: Double? = nil,
        ordering: String? = nil, search: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<SetList> {
        let localVariablePath = "/api/v3/lego/sets/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (
                wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "page_size": (
                wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "theme_id": (
                wrappedValue: themeId?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "min_year": (
                wrappedValue: minYear?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "max_year": (
                wrappedValue: maxYear?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "min_parts": (
                wrappedValue: minParts?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "max_parts": (
                wrappedValue: maxParts?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "ordering": (
                wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "search": (
                wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SetList>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get a list of all Inventory Minifigs in this Set.

     - parameter setNum: (path)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SetMinifigsList
     */

    open class func legoSetsMinifigsList(
        setNum: String, page: Int? = nil, pageSize: Int? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> SetMinifigsList {
        try await legoSetsMinifigsListWithRequestBuilder(
            setNum: setNum, page: page, pageSize: pageSize, apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get a list of all Inventory Minifigs in this Set.
     - GET /api/v3/lego/sets/{set_num}/minifigs/
     - Get a list of all Inventory Minifigs in this Set.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter setNum: (path)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SetMinifigsList>
     */
    open class func legoSetsMinifigsListWithRequestBuilder(
        setNum: String, page: Int? = nil, pageSize: Int? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<SetMinifigsList> {
        var localVariablePath = "/api/v3/lego/sets/{set_num}/minifigs/"
        let setNumPreEscape = "\(APIHelper.mapValueToPathItem(setNum))"
        let setNumPostEscape =
            setNumPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{set_num}", with: setNumPostEscape, options: .literal, range: nil
        )
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (
                wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "page_size": (
                wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SetMinifigsList>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get a list of all Inventory Parts in this Set.

     - parameter setNum: (path)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter incPartDetails: (query) Return additional part&#39;s fields. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SetPartsList
     */

    open class func legoSetsPartsList(
        setNum: String, page: Int? = nil, pageSize: Int? = nil, incPartDetails: Bool? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> SetPartsList {
        try await legoSetsPartsListWithRequestBuilder(
            setNum: setNum, page: page, pageSize: pageSize, incPartDetails: incPartDetails,
            apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get a list of all Inventory Parts in this Set.
     - GET /api/v3/lego/sets/{set_num}/parts/
     - Get a list of all Inventory Parts in this Set.  Optional parameter inc_part_details=1 can be used to return additional part fields, the same as for a single part lookup. Optional parameter inc_minifig_parts=1 can be used to include minifig parts in this call. Optional parameter inc_color_details=0 can be used to prevent color field expansion and reduce response sizes.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter setNum: (path)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter incPartDetails: (query) Return additional part&#39;s fields. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SetPartsList>
     */
    open class func legoSetsPartsListWithRequestBuilder(
        setNum: String, page: Int? = nil, pageSize: Int? = nil, incPartDetails: Bool? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<SetPartsList> {
        var localVariablePath = "/api/v3/lego/sets/{set_num}/parts/"
        let setNumPreEscape = "\(APIHelper.mapValueToPathItem(setNum))"
        let setNumPostEscape =
            setNumPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{set_num}", with: setNumPostEscape, options: .literal, range: nil
        )
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (
                wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "page_size": (
                wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "inc_part_details": (
                wrappedValue: incPartDetails?.asParameter(
                    codableHelper: apiConfiguration.codableHelper), isExplode: true
            ),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SetPartsList>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get details for a specific Set.

     - parameter setNum: (path)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Set
     */

    open class func legoSetsRead(
        setNum: String,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> ModelSet {
        try await legoSetsReadWithRequestBuilder(
            setNum: setNum, apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get details for a specific Set.
     - GET /api/v3/lego/sets/{set_num}/
     - Get details for a specific Set.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter setNum: (path)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Set>
     */
    open class func legoSetsReadWithRequestBuilder(
        setNum: String,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<ModelSet> {
        var localVariablePath = "/api/v3/lego/sets/{set_num}/"
        let setNumPreEscape = "\(APIHelper.mapValueToPathItem(setNum))"
        let setNumPostEscape =
            setNumPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{set_num}", with: setNumPostEscape, options: .literal, range: nil
        )
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelSet>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Get a list of all Inventory Sets in this Set.

     - parameter setNum: (path)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SetList
     */

    open class func legoSetsSetsList(
        setNum: String, page: Int? = nil, pageSize: Int? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> SetList {
        try await legoSetsSetsListWithRequestBuilder(
            setNum: setNum, page: page, pageSize: pageSize, apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Get a list of all Inventory Sets in this Set.
     - GET /api/v3/lego/sets/{set_num}/sets/
     - Get a list of all Inventory Sets in this Set.
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter setNum: (path)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SetList>
     */
    open class func legoSetsSetsListWithRequestBuilder(
        setNum: String, page: Int? = nil, pageSize: Int? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<SetList> {
        var localVariablePath = "/api/v3/lego/sets/{set_num}/sets/"
        let setNumPreEscape = "\(APIHelper.mapValueToPathItem(setNum))"
        let setNumPostEscape =
            setNumPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{set_num}", with: setNumPostEscape, options: .literal, range: nil
        )
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (
                wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "page_size": (
                wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SetList>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Return all Themes

     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ThemesList
     */

    open class func legoThemesList(
        page: Int? = nil, pageSize: Int? = nil, ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> ThemesList {
        try await legoThemesListWithRequestBuilder(
            page: page, pageSize: pageSize, ordering: ordering, apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Return all Themes
     - GET /api/v3/lego/themes/
     - Return all Themes
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ThemesList>
     */
    open class func legoThemesListWithRequestBuilder(
        page: Int? = nil, pageSize: Int? = nil, ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<ThemesList> {
        let localVariablePath = "/api/v3/lego/themes/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (
                wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "page_size": (
                wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
            "ordering": (
                wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ThemesList>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }

    /**
     Return details for a specific Theme

     - parameter id: (path) A unique integer value identifying this theme.
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Theme
     */

    open class func legoThemesRead(
        id: Int, ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) async throws(ErrorResponse) -> Theme {
        try await legoThemesReadWithRequestBuilder(
            id: id, ordering: ordering, apiConfiguration: apiConfiguration
        ).execute().body
    }

    /**
     Return details for a specific Theme
     - GET /api/v3/lego/themes/{id}/
     - Return details for a specific Theme
     - API Key:
       - type: apiKey authorization (HEADER)
       - name: ApiKeyAuth
     - parameter id: (path) A unique integer value identifying this theme.
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Theme>
     */
    open class func legoThemesReadWithRequestBuilder(
        id: Int, ordering: String? = nil,
        apiConfiguration: RebrickableLegoAPIClientAPIConfiguration =
            RebrickableLegoAPIClientAPIConfiguration.shared
    ) -> RequestBuilder<Theme> {
        var localVariablePath = "/api/v3/lego/themes/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape =
            idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(
            of: "{id}", with: idPostEscape, options: .literal, range: nil
        )
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (
                wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper),
                isExplode: true
            ),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Theme>.Type = apiConfiguration
            .requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
            parameters: localVariableParameters, headers: localVariableHeaderParameters,
            requiresAuthentication: true, apiConfiguration: apiConfiguration
        )
    }
}
