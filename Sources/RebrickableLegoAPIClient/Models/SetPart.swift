//
// SetPart.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SetPart: Sendable, Codable, ParameterConvertible, Hashable {
    public var id: Int
    public var invPartId: Int
    public var part: Part
    public var color: Color
    public var setNum: String
    public var quantity: Int
    public var isSpare: Bool
    public var elementId: String
    public var numSets: Int

    public init(id: Int, invPartId: Int, part: Part, color: Color, setNum: String, quantity: Int, isSpare: Bool, elementId: String, numSets: Int) {
        self.id = id
        self.invPartId = invPartId
        self.part = part
        self.color = color
        self.setNum = setNum
        self.quantity = quantity
        self.isSpare = isSpare
        self.elementId = elementId
        self.numSets = numSets
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case invPartId = "inv_part_id"
        case part
        case color
        case setNum = "set_num"
        case quantity
        case isSpare = "is_spare"
        case elementId = "element_id"
        case numSets = "num_sets"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(invPartId, forKey: .invPartId)
        try container.encode(part, forKey: .part)
        try container.encode(color, forKey: .color)
        try container.encode(setNum, forKey: .setNum)
        try container.encode(quantity, forKey: .quantity)
        try container.encode(isSpare, forKey: .isSpare)
        try container.encode(elementId, forKey: .elementId)
        try container.encode(numSets, forKey: .numSets)
    }
}

@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension SetPart: Identifiable {}
