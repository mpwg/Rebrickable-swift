//
// ModelSet.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ModelSet: Sendable, Codable, ParameterConvertible, Hashable {
    public var setNum: String?
    public var name: String?
    public var year: Int?
    public var themeId: Int?
    public var numParts: Int?
    public var setImgUrl: String?
    public var setUrl: String?
    public var lastModifiedDt: Date?

    public init(
        setNum: String? = nil, name: String? = nil, year: Int? = nil, themeId: Int? = nil,
        numParts: Int? = nil, setImgUrl: String? = nil, setUrl: String? = nil,
        lastModifiedDt: Date? = nil
    ) {
        self.setNum = setNum
        self.name = name
        self.year = year
        self.themeId = themeId
        self.numParts = numParts
        self.setImgUrl = setImgUrl
        self.setUrl = setUrl
        self.lastModifiedDt = lastModifiedDt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case setNum = "set_num"
        case name
        case year
        case themeId = "theme_id"
        case numParts = "num_parts"
        case setImgUrl = "set_img_url"
        case setUrl = "set_url"
        case lastModifiedDt = "last_modified_dt"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(setNum, forKey: .setNum)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(year, forKey: .year)
        try container.encodeIfPresent(themeId, forKey: .themeId)
        try container.encode(numParts, forKey: .numParts)
        try container.encode(setImgUrl, forKey: .setImgUrl)
        try container.encode(setUrl, forKey: .setUrl)
        try container.encode(lastModifiedDt, forKey: .lastModifiedDt)
    }
}
